Tutorial

* 개요

2016년 5회 D2 Campus Seminar '[[https://golang.org/][Go]] Gopher 길들이기'를 위해 만들어진 온라인 투어 페이지입니다.

- - 처음 페이지로 돌아가려면, 화면 좌상단의 [[javascript:highlight(".logo")][Go Gopher 길들이기]]를 클릭하기 바랍니다.
- - 콘텐츠의 목록을 보려면, 화면 우상단의 [[javascript:highlightAndClick(".nav")][메뉴]]를 클릭하기 바랍니다.
- - 이전 페이지로 돌아가려면, 화면 좌하단의 [[javascript:highlight(".prev-page")]["<"]]을 클릭하거나 키보드의 `PageUp` 키를 누르세요.
- - 다음 페이지로 넘어가려면, 화면 좌하단의 [[javascript:highlight(".next-page")][">"]]을 클릭하거나 키보드의 `PageDown` 키를 누르세요.

본 온라인 투어는 직접 동작 가능합니다. 코드 에디터의 아래에 위치하는 [[javascript:highlightAndClick("#run")][Run]] 버튼을 클릭하면 프로그램이 수행됩니다.

본 온라인 투어는 2016년 5회 D2 Campus Seminar를 위해 만들어졌으며, 설명문을 포함하여 많은 부분을 [[https://go-tour-kr.appspot.com][한글 공식 온라인 투어]]에서 참고하였습니다.

** Hello, world

첫번째 예제입니다. 화면에 간단히 "Hello, world"라는 문자열을 출력합니다.

    package main

프로그램의 진입점인 `main` 함수가 있는 패키지임을 나타냅니다.

    import "fmt"

[[https://golang.org/pkg/fmt/][fmt]] 패키지를 사용하는 것을 명시합니다. 패키지 이름은 디렉토리 경로의 마지막 이름을 사용하는 것이 규칙입니다.
예를 들어 "path/filepath" 를 사용한다면 패키지명은 filepath 입니다.

** Challenge
- 1. [[https://golang.org/pkg/fmt/][fmt]](클릭) 패키지 문서를 살펴보세요. 패키지가 제공하는 함수들을 살펴보세요.
- 2. [[https://golang.org/pkg/fmt/#Printf][fmt.Printf]] 함수를 사용하도록 프로그램을 수정하세요.
- 3. `name` 이라는 `string` 형 변수를 선언하고, 어떤 문자열 값을 넣어 초기화 한 후, 이를 [[https://golang.org/pkg/fmt/#Printf][fmt.Printf]] 함수를 사용하여 출력해 보세요.

.play d2_campus_2016/hello.go

* 변수

변수를 선언해 봅시다.

Go 언어는 굉장히 강한 수준의 정적 타입 언어입니다. 심지어 암묵적인 타입 변환(implicit conversion)을 지원하지 않습니다.

    var a int = 10
    var b int64

    b = a   // 컴파일 에러 발생 (암묵적인 형변환 안됨)

하지만, 컴파일러의 타입 추론(type inference)으로 마치 동적 언어처럼 변수를 선언할 수 있습니다.

또, 모든 변수는 선언과 동시에 초기화 됩니다. 코드에 값이 지정된 경우 지정된 값으로, 지정되어 있지 않다면 해당 타입의 초기값으로 설정 됩니다.
각 타입의 초기값은 `int` 과 같은 숫자 타입은 0으로, `string` 은 empty string(""), pointer 타입은 `nil` 로 초기화 됩니다.

Go 언어는 pointer 타입을 제공하며, C 언어와 동일하게 잘못된 메모리 접근시 panic(프로그램 비정상 종료)가 발생하므로 유의해야 합니다.
Go 언어는 가비지 콜렉터에 의해 메모리 자원이 회수되므로, C 언어에서 처럼 명시적인 `free` 함수가 없습니다.

C 언어에서 `NULL` 과 같은 역할을 하는 식별자(identifier)는 `nil` 입니다.

** 상수

`var` 가 변수를 지정하는 키워드라면, `const` 는 상수를 지정하는 키워드 입니다.

    const ADDR = "http://naver.com"
    const PORT = 80

어떤 변수에 상수를 대입 할 때, 컴파일러는 상수가 해당 변수 타입에 맞는지 확인 합니다.
마찬가지로, 짧은 변수 선언시 컴파일러는 상수의 값에 따라 변수의 타입을 추론 합니다.


.play d2_campus_2016/variable.go


* 제어문

`if`, `for`, `switch` 문을 실습해 봅니다.

** if 문
`if` 문은 C와 Java와 비슷합니다. 조건 표현을 위해 ( ) 는 사용하지 않습니다. 하지만 실행문을 위한 { } 는 반드시 작성해야 합니다.

** for 문
Go 언어는 반복문이 `for` 밖에 없습니다.
기본적인 `for` 반복문은 C와 Java 언어와 거의 유사합니다. 다른점은 소괄호 ( )가 필요하지 않다는 것 입니다.
하지만 실행문을 위한 중괄호 { } 는 필요 합니다.

** switch 문
다른 일반적인 언어를 아는 분이라면 `switch` 에 대해서 잘 알 것 입니다.
다른 언어와 다른점은 `case` 의 코드 실행을 마치면 알아서 `break` 를 한다는 점 입니다.

`break` 문은 `for` 문과 함께 사용할 때 유용 합니다. `label` 을 명시한 for문을 한꺼번에 빠져나갈 때 사용 합니다.

    outerloop:
    for {
        switch {
        case i > 100:
            // do something
            break outerloop
        } 
    }

`fallthrough` 로 끝나는 case는 스스로 break를 하지 않고, 다음 `case` 문을 평가 하도록 합니다.

.play d2_campus_2016/cond.go


* 제어문 II

** Challenge
Fizz Buzz 문제를 구현해 봅니다.

Fiz Buzz 문제는 다음과 같은 규칙을 가지고 있습니다.

- (1) 3으로 나누어지는 수가 주어지면 숫자 대신 'fizz' 를 출력 합니다.
- (2) 5로 나누어지는 수가 주어지면 숫자 대신 'buzz' 를 출력 합니다.
- (3) 3과 5로 나누어지는 수(e.g., 15)가 주어지면 숫자 대신 'fizz buzz' 를 출력 합니다.

위 규칙에 맞춰, 1에서 100까지 숫자를 출력 해 보세요.

.play d2_campus_2016/fizzbuzz.go


* function

Go 언어의 함수에 대하여 알아 봅시다.

Go 언어에서 함수는 다음과 같이 선언 합니다.

    func 함수명(매개변수_이름1 매개변수_타입1, 매개변수_이름2 매개변수_타입2) 반환타입

C(혹은 그와 유사한) 언어와는 조금 다른 모양인데요.

- 1. 반환 타입이 맨 뒤에 붙습니다.
- 2. 매개 변수는 이름이 먼저 나오고, 그 후에 타입이 명세 됩니다.
- 3. 매개 변수 리스트에서 연달은 매개 변수가 같은 타입인 경우, 가장 마지막 매개 변수를 제외하면 매개 변수 타입 명세를 생략할 수 있습니다.
- 4. Go 언의의 함수는 다중 값을 반환 할 수 있습니다.

    func swap(x, y int) (int, int) {
        return y, x
    }
    
Go 언어에서 함수명은 특별한 의미를 가지고 있습니다. 다른 언어에서와는 다르게 함수에 대한 접근자(access modifier)를 가지고 있지 않습니다.
예를 들어, JAVA 언어라면 `public`, `private` 와 같은 접근자가 있겠지요.

대신 Go 언어에서는 함수명을 가지고 이를 구분 합니다.
함수명의 첫 문자가 영문 대문자라면 `public` 속성을 가지며, 현재 패키지 외부로 노출 됩니다.
반대로 영문 소문자라면 `private` 속성을 가지며 현재 패키지 외부로 노출 되지 않습니다.

Go 언어는 언어 자체에서 유니 코드(UTF-8)를 지원 합니다. 즉, 함수명도 한글로 지정 할 수 있습니다.
다만, 한글은 영문 대문자가 아니므로 한글로 지정한 함수는 모두 `private` 속성을 가집니다.

** Challenge
- - 어떤 수 a, b가 주어졌을 때, 이를 나누는 함수 `div` 를 구현 하세요.
- - `div` 함수는 2개의 `int` 형 정수 받아 (float64, error)가 반환되어야 합니다.
- - 분모, 즉 b가 0인 경우 의도하지 않은 결과가 나올 수 있습니다. 이를 방지하기 위해 b가 0인 경우 적당한 error 객체가 반환되어야 합니다.
- - error 객체를 만들기 위해서는 [[https://golang.org/pkg/errors/#example_New][errors.New]] 함수를 참고하기 바랍니다.
- - 에러가 발생하지 않은 경우, 반환되는 error 객체의 값은 `nil` 이어야 합니다.

.play d2_campus_2016/function.go


* struct 타입 I
`struct` 타입은 Go 언어에서의 객체 입니다. 

어떤 `struct` 타입은 해당 타입의 속성(property)를 나타내는 필드(field)와 동작을 나타내는 매서드(method)를 가집니다.

함수에서 처럼, 필드명이나 매서드명의 첫 문자가 영문 대문자라면 `public` 속성을 가집니다.

매서드는 다음과 같은 형태로 선언 됩니다.

    func (변수_이름 리시버_타입) 매서드_이름(매개변수_리스트) 반환타입

리시버(receiver)는 작용할 객체를 나타내며, 매서드 내에서는 지정된 변수명으로 해당 객체에 접근할 수 있습니다.
여기서 주의할 점은, 리시버는 `value receiver` 와 `pointer receiver` 로 구분된다는 점 입니다.

C 언어에서의 'pass by value', 'pass by reference'와 유사한 개념 입니다.

`value receiver` 라면 객체는 `value` 로 전달 되어 별도의 지역 변수가 생깁니다. 즉, 실제 객체는 매서드 내에서 변경될 수 없습니다.
`pointer receiver` 라면 객체는 `reference` 로 전달 되어, 실제 객체를 매서드 내에서 변경할 수 있습니다.

(오른쪽 예제에서 `aging` 매서드를 `value receiver` 로 변경하면 실제 객체의 값이 변경되지 않음을 확인 할 수 있습니다.)

** 열거자

오른쪽 예제에서는 `gender` 라는 타입을 선언하고, 이 타입의 상수들을 선언 하였습니다.
Go 언어에서는 이처럼 상수를 열거자(enumerator)로 사용 합니다.

이 때는 주로 `const` 블록 단위로 설정 합니다. 숫자 타입인 경우, `iota` 라는 키워드로 할당 할 수 있는데 0을 의미합니다.

다음에 등장하는 상수는 타입의 별도 기입이 없다면 자동적으로 윗 행의 타입을 따르게 됩니다.
그리고 숫자 타입인 경우 윗 행의 값에 1을 더하여 지정 됩니다.

참고로 `iota` 는 `const` 블록마다 0으로 초기화 됩니다.

.play d2_campus_2016/struct.go


* struct 타입 II

`struct` 타입은 Go 언어에서 객체라고 언급 했습니다.

그럼 Go 언어는 '객체지향 언어'라고 할 수 있을까요?

짧게 정리하면, Go 언어는 객체의 '상속'이 없는 '객체지향 언어'라 할 수 있습니다.
그러면 '상속'과 같이 코드를 재활용 할 수 있는 방법이 없을까요?

Go 언어에서는 코드 재사용을 위해 '내포(embedding)' 라는 기법을 제공 합니다.
어떤 객체에서 다른 객체(struct, interface)의 필드 혹은 매서드를 온전히 내포시키는 방법이지요.

얼핏 보면 '상속'과 유사하지만, '상속'에서 처럼 서브 타입 인스턴스가 슈퍼 타입 변수에 할당 될 수 없습니다.
(정확히 말하면 '내포'에서는 슈퍼 타입이나 서브 타입이라는 개념이 없습니다.)

    var aPerson person
    var aEmployee employee

    aPerson = aEmployee     // 에러 발생
    

** 오버로딩과 오버라이딩

Go 언어에서는 위에서 처럼 '내포' 기법을 이용하여, 다른 객체를 내포할 수 있습니다.
이 때 내포된 객체와 동일한 매서드명을 정의 한다면, 내포한 객체의 매서드가 호출 되는 것을 확인 할 수 있습니다.
즉, 내포한 객체의 매서드로 오버로딩(overloading) 되었습니다.

예제에 아래 코드를 삽입하여 확인 해 보세요.

    func (p employee) print() {
        fmt.Println("employee info:")
        p.person.print()
    }

Go 언어에서는 오버라이딩을 지원하지 않습니다. 별도 이름을 가지는 매서드로 분리되어야 합니다.


.play d2_campus_2016/struct_embedding.go

* interface 타입

* closure

* slice 타입

* map 타입

* Goroutine I

* Goroutine II


* 축하합니다!

2016년 5회 D2 Campus Seminar 'Go Gopher 길들이기'의 모든 실습 과정을 살펴 보았습니다.
이제 Gopher로의 첫 발을 내딛게 되었습니다. 축하합니다!

더 자세하고 심화된 실습은 [[https://tour.golang.org][공식 온라인 투어]] 및 [[https://go-tour-kr.appspot.com][한글 공식 온라인 투어]]에서 진행할 수 있습니다.

Go 1.x 버전은 `Go 1` 이라는 언어 스펙을 따르고 있어 언어적인 구조는 2.x 버전이 나오기 전까지 크게 바뀌지 않겠지만, 아무래도 [[https://tour.golang.org][공식 온라인 투어]]가 최신의 내용을 반영하고 있을 확률이 높습니다.

Go 언어는 구조적으로 매우 단순하며, 아래 링크의 공식 안내서를 읽어보는 것 만으로도 언어적인 특성은 대부분 습득하실 수 있으리라 생각 합니다.

- [[https://golang.org/doc/install][Getting Started]]
- [[https://golang.org/doc/code.html][How to Write Go Code]]
- [[https://golang.org/doc/effective_go.html][Efective Go]]

또, 아래와 같은 온라인 서적에서 Go 언어를 보다 자세하고 세심하게 살펴 볼 수 있습니다. (게다가 국문으로 번역 되었죠.)

- [[http://www.codingnuri.com/golang-book/index.html][An Introduction to Programming in Go -Caleb Doxsey]]
